* Design Pattern
  http://www.cnblogs.com/maowang1991/archive/2013/04/15/3023236.html

** Design Pattern Category
   1. Creation: Factory, Abstract Factory, Singleton, Builder, Prototype
   2. Structure: Adapter, Decorator, Proxy, Outlook, Bridge, Composite, Shared
   3. Behavior: Strategy, Template, Observer, Iterator, Resposibility, Command, Reminder, State, Visitor, Mediator, Intepreter
   4. Other: Parallel, ThreadPool

** Design Pattern Principles

*** Open Close Principle
    Open to Extensions, Close to Modifications

*** Liskov Substitution Principle, LSP
    From where a base class appears, a inherited class could appear

*** Dependence Inversion Principle
    Code against Interface

*** Interface Segregation Principle
    Use Multiple Segregated Interfaces > Use Simgle Complicated Interface

*** Demeter Principle
    Entity should eliminate interactions between other entities

*** Composite Reuse Principle
    Use Composition instead of inheritance
    
** Design Pattern

*** Factory: Normal Factory
    Create Name -> Creator Dictonary.

*** Factory: Multi-Factory
    Class Method Name -> Creator Dictionary.

*** Factory: Static Factory
    Static Method Name -> Creator Dictionary.

*** Factory: Abstract Factory, to remove code injection to Factory Class
    Interface -> New Class -> Creator Dictionary

*** Singleton: Only one instance.
    Class -> private static Class variable
    Class -> private constructor()
    Class -> public getInstance()
    Class -> public readResolve()

    Synchronized Singleton creation and get.

*** Builder: Create and Maintain a <DataStructure> of some classes

*** Prototype: Clone in a chain.

*** Adapter: Adapter for Class, Ways to implement a Interface.
    Adapter A extends Source implements Target(INTF)
    
*** Adapter: Adapter for Instance
    Adapter A has Source implements Target(INTF)

*** Adapter: Adapter for Interface
    Abstract Wrapper: Skeleton for the Interface.
    Inherit from the Wrapper to make the real implementation.

*** Decorator: Some other languages use this as a great syntax sugar. python.
    Code before, code after.
    Very little relation with which interface you want to implement
    
*** Proxy: Class you want to delegate you internal source.
    Who implement the proxy is KEY

*** Facade: Configuration for your classes.

*** Bridge: Separate Instances and Interfaces.
    A, B implements INTF
    C is bridge of A & B, it can set source to either A or B.
    D uses C as a bridge.

*** Composite: Often Used in Data structure, such as tree.
    
*** Flyweight: Connection Pool.

*** Strategy: Change algorithm core will not affect your real implementation.

*** Template, abstract class, and a lot of classes inherited it.

*** Observer

*** Iterator

*** Chain of responsibility

*** Command
[Command](http://dl.iteye.com/upload/attachment/0083/1239/98cda4fc-00b1-300d-a25b-63229f0f1cbd.jpg)
OData Protocol

*** Memento
Logs

*** State
DFS, NFS

*** Visitor
    One type of subject, a type visitor.
    visitor(Subject subject);
    subject(Visitor visitor);

*** Mediator
    A<->B
    Mediator -> A
    Mediator -> B

*** Intepreter
    Input + Context

** Why Design Pattern

*** From the model of von'Neumann, we know that Data and Functions are the same. In early times of asm, C, Lisp, functions can be transferred between variables.
    Pointer is the key point in C, which is definitely the representative for von'Neumann computer. However, it is too hard for your mind to really take care of them,
    eg, maintain a tree.
    Object Oriented Programming, function and data type is combined inside one 'Class' -> Paradigm

    Memory allocation -> constructor, deconstructor
    Virtual table-> a table that points the real function.

    Java, elimination of all function pointers, and object pointers. VMs, Reflections

    This will be especially more effort when you design something like GCD, queues, runtime added features, currying.
