* Storing List of Values with Vectors
#+begin_src rustic
  let v: Vec<i32> = Vec::new();
  v.push(1);
  v.push(2);
  v.push(3);
  let v = vec![1, 2, 3]
#+end_src
* Dropping a Vector drop its elements
* Reading Vectors
#+begin_src rustic
  let v = vec![1, 2, 3, 4, 5];
  let third: &i32 = &v[2]; // directly get the 2nd item, will PANIC
  match v.get(2) { // get Option<&T>, will not panic when out of bound
      Some(third) => println!("The third element is {}", third),
      None => println!("There is no third element."),
  }
#+end_src
** Borrow checker: enforce the ownership and borrowing rules to ensure the reference and any other references to the contents of the vector remain valid
* Iterate over the vector
#+begin_src rustic
  let v = vec![100, 32, 57];
  for i in &v {
      println("{}", i);
  }
  let mut v2 = vec![100, 32, 57]
  for i in &mut v2 {
      *i += 50;
  }
#+end_src
`*` is the dereference operator to get the value.
* Use enum to store multiple types
#+begin_src rustic
  enum SpreadsheetCell {
      Int(i32),
      Float(f64),
      Text(String),
  }
  let row = vec![
      SpreadsheetCell::Int(3),

  ];
#+end_src
* Using a utf-8 string
** STDlib: Growable, mutable, owned, UTF-8 encoded
** Create a new String:
#+begin_src rustic
  // Initial an empty string
  let mut s = String::new();
  // to_string method available on type implements _Display_ trait
  let data = "initial contents";
  let s = data.to_string();
  let s = "initial contents".to_string();
  // Initial from string literal
  let s = String::from("initial contents");
#+end_src
** Update a string:
#+begin_src rustic
  // Append using push_str/push
  let mut s = String::from("foo");
  s.push_str("bar");
  // Ownership no change
  let s2 = "bar";
  s.push_str(s2);
  println!("s2 is {}", s2);
  // push only take one char
  s.push('l');
#+end_src
** Concat with the _+_ or the _format!_ Macro
#+begin_src rustic
  let s1 = String::from("Hello, ");
  let s2 = String::from("world!");
  let s3 = s1 + &s2; // s1 has been moved here and no longer be used.
  let s4 = format!("{}-{}-{}", s1, s2, s3);
#+end_src
*** deref coerce: &String -> &str
*** _+_ take ownership of s1
** Index into strings:
*** Indexing not possible, charset not compatible in utf-8
*** Use library in crates.io
* Store in hash maps
** All keys must have the same type, all values have the same type
#+begin_src rustic
  use std::collections::HashMap;

  let teams = vec![String::from("Blue"), String::from("Yellow")];
  let initial_scores = vec![10, 50];

  let mut scores: HashMap<_, _> = teams.into_iter().zip(initial_scores.into_iter()).collect();
#+end_src
** HashMap and ownership: if type implement the Copy trait, copy; else take ownership
#+begin_src rustic
  using std::collections::HashMap;

  let field_name = String::from("Fav");
  let field_value:i32 = 32;

  let mut map = HashMap::new();
  map.insert(field_name, field_value);
  // field_name is invalid now!
#+end_src
** Access Values: .get(&name)
** Update Values
*** overwrite: .insert with the same name
*** insert when key is empty: .entry(name).or_insert(value)
** Hash functions: Sip Hash
